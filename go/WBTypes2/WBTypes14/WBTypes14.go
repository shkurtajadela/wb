package main

import "fmt"

/*Функции помогают нам объединить последовательность действий в одну целую единицу.
Функция в Go - это блок кода, который выполняет определенную задачу блок кода.*/

/*
	Синтаксис:

	func functionName(arg1 type1, arg2 type2) (ret1 return_type1, ret2 return_type2) {
		function`s body
	}
		Имя функции и ее параметры:
		- functionName - это имя функции.
		- arg1, arg2, и т.д. - аргументы(параметры) функции, каждый с указанием своего типа (type1, type2).
		- ret1, ret2 - возвращаемые значения
		- return_type - тип возвращаемого значения функции.
		- function`s body - тело функции

		Все вместе называется сигнатура функции (совокупность имен, списка параметров, возвращаемых значений)
	   	Тело функции:
	   - Может содержать любые инструкции или операции.
	   - Включая вложенные блоки кода и другие вызовы функций.

		Функция может вернуть, как одно, так и несколько значений.

		В Go мы можем возвращать именнованные параметры:
		func functionName() (res string, err error)

		В Go мы можем возвращать неименнованные параметры по типу:
		func functionName() (string, error)

		В Go ... называется "variadic function parameter" и используется для передачи переменного количества аргументов в функцию.
		Это позволяет функции принимать любое количество аргументов одного типа.

		В нашем примере func functionName(res ...string)
		Так выглядит типичный синтаксис вариативной функции. Оператор ..., который еще называют оператором упаковки, указывает Go сохранить все аргументы типа Type в параметре res.
		Другими словами, Go создает переменную res c типом []Type, то есть слайс.

*/

// Функция, которая принимает переменное количество строковых аргументов
func functionName(res ...string) {
	// Перебираем все аргументы и выводим их
	fmt.Println(res)
	//for _, s := range res {
	//	fmt.Println(s)
	//}
}
func main() {
	// Вызываем функцию с разным количеством аргументов
	functionName("Nickolay", "Tell us")
	functionName("Nickolay", "Tell us", "Your")
	functionName("Nickolay", "Tell us", "Your", "Location", "!")

}
