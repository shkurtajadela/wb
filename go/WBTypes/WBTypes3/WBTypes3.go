package main

import (
	"fmt"
	"math/big"
	"unsafe"
)

func main() {

	/*	Типы данных*/

	/* 	Встроенные типы данных (простые, составные)*/

	/* 	Строковый, числовой, логический*/

	/*	Числовой тип*/

	/*	Целочисленные типы (int): Эти типы представляют целые числа без дробной части.
		В Go есть несколько разных размеров целочисленных типов: int, int8, int16, int32 и int64.
		Размер определяет диапазон возможных значений. Например, int8 может хранить целые числа от -128 до 127,
		а int64 - от -9223372036854775808 до 9223372036854775807.

		Беззнаковые целочисленные типы (uint): Эти типы также представляют целые числа, но они не могут хранить отрицательные значения.
		Есть аналогичные типы для каждого размера: uint, uint8, uint16, uint32 и uint64.
		Например, uint8 может хранить целые числа от 0 до 255.

		Типы с плавающей точкой (float): Эти типы представляют числа с плавающей точкой, то есть числа с дробной частью.
		В Go есть два основных типа с плавающей точкой: float32 и float64. float32 представляет числа с одинарной точностью,
		а float64 - с двойной точностью. Обычно float64 используется по умолчанию из-за большей точности.

		Комплексные числа (complex): В Go также есть типы для представления комплексных чисел: complex64 и complex128.
		Они представляют комплексные числа с одинарной и двойной точностью соответственно. Комплексное число:3 + 4i

		Тип byte: byte представляет собой псевдоним для типа uint8 и используется для хранения байтовых данных.

		Тип rune: rune представляет собой псевдоним для типа int32 и используется для представления Unicode-символов.

		Псевдоним в контексте языка программирования означает, что один тип данных имеет другое имя, но фактически представляет тот же самый тип данных.
		В случае с типом byte в Go, он является псевдонимом для типа uint8, что означает, что оба эти имени обозначают один и тот же тип данных.
	*/

	/*int, int8, int16, int32, и int64 типы данных в Go, представляющие знаковые целые числа различных размеров

	int8:

	int8 занимает 8 бит (1 байт).
	Этот тип может хранить целые числа в диапазоне от -128 до 127.
	Пример:

	var num int8 = 42

	int16:

	int16 занимает 16 бит (2 байта).
	Этот тип может хранить целые числа в диапазоне от -32768 до 32767.

	var num int16 = 1000

	int32:

	int32 занимает 32 бита (4 байта).
	Этот тип может хранить целые числа в диапазоне от -2147483648 до 2147483647.

	var num int32 = 100000
	int64:

	int64 занимает 64 бита (8 байт).
	Этот тип может хранить целые числа в диапазоне от -9223372036854775808 до 9223372036854775807.

	var num int64 = 1000000000
	Таким образом, каждый тип int в Go занимает разное количество байт, что влияет на его диапазон значений и точность при работе с большими числами.*/

	/*	Рассмотрим на примерах кода теорию выше: */

	fmt.Printf("Размер int на данной системе: %d байт\n", unsafe.Sizeof(int(0)))

	var num3 uint8 = 1
	var num4 uint64 = 1

	fmt.Printf("Размер num3: %d байт\n", unsafe.Sizeof(num3))
	fmt.Printf("Размер num4: %d байт\n", unsafe.Sizeof(num4))

	var MyNewInt int8
	//var MyNewInt int16
	MyNewInt = 127

	fmt.Println(MyNewInt)

	//MyNewInt = 129 // '129' (type untyped int) cannot be represented by the type int8
	//
	//fmt.Println(MyNewInt)

	var myInt int // myInt == 0

	fmt.Println("Значение переменной myInt:", myInt) // Output: 0

	//myInt = 9223372036854775807100000
	//fmt.Printf("Значение переменной myInt: %q\n", myInt)

	// cannot use 9223372036854775807100000 (untyped int constant) as int value in assignment (overflows)

	/*	Сообщение об ошибке указывает на то, что значение, которое вы пытаетесь присвоить переменной типа int,
		на самом деле превышает максимальное значение для этого типа. Значение, которое вы пытаетесь присвоить, составляет 9223372036854775807100000,
		что намного больше максимального значения для int, поэтому происходит переполнение.
	*/

	// Создание объекта big.Int и установка значения
	num := new(big.Int)
	num.SetString("9223372036854775807100000", 10)

	// Вывод значения
	fmt.Println(num)

	fmt.Printf("Тип переменной myInt: %T\n", num)

	/*	big.Int является структурой в стандартной библиотеке Go,
		предназначенной для работы с произвольно большими целыми числами.
		Она позволяет работать с числами, превышающими ограничения типов данных фиксированного размера,
		таких как int64 или uint64.

		Функция SetString используется для установки значения объекта big.Int на основе строки,
		представляющей число. Параметры функции:

		Первый параметр - строка, представляющая число.
		Второй параметр - основание системы счисления. В нашем случае это 10,
		что означает десятичное представление числа.
		Таким образом, строка "9223372036854775807100000" передается функции SetString,
		чтобы установить значение объекта big.Int.
		В данном случае значение 10 указывает, что строка представляет число в десятичной системе счисления.
		Десятичная система счисления широко используется в повседневной жизни,
		и цифры в этой системе представлены от 0 до 9.*/

}
