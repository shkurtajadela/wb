/*Слайс в Go представляет собой структуру, которая содержит три компонента:

Указатель на массив данных (Pointer).
Длину слайса (Length).
Емкость слайса (Capacity).

type SliceHeader struct {
Data uintptr
Len  int
Cap  int
}
Компоненты слайса
Data: Указатель на первый элемент базового массива. Это значение указывает на место в памяти, где хранятся элементы слайса.
Len: Длина слайса, то есть количество элементов, доступных для чтения и записи через слайс.
Cap: Емкость слайса, то есть максимальное количество элементов, которые могут быть размещены в слайсе, не изменяя базовый массив.*/

package main

import (
	"fmt"
	"reflect"
	"unsafe"
)

func main() {
	// Создаем массив
	array := [5]int{1, 2, 3, 4, 5}

	// Создаем слайс на основе массива
	slice := array[1:4]

	// Получаем заголовок слайса
	header := (*reflect.SliceHeader)(unsafe.Pointer(&slice))

	fmt.Printf("Data: %x\n", header.Data)
	fmt.Printf("Len: %d\n", header.Len)
	fmt.Printf("Cap: %d\n", header.Cap)
}

/*Data: <адрес в памяти>
Len: 3
Cap: 4
Как слайсы работают под капотом
Создание слайса:
Когда вы создаете слайс, у него есть базовый массив, на который указывает указатель Data.
Например, при создании слайса slice := array[1:4] указатель Data указывает на второй элемент массива array.

Длина слайса:
Длина слайса (Len) указывает на количество элементов, которые можно использовать в слайсе.
В нашем примере slice имеет длину 3, так как он включает элементы array[1], array[2] и array[3].

Емкость слайса:
Емкость слайса (Cap) указывает на максимальное количество элементов, начиная с Data,
которые могут быть использованы без переназначения базового массива.
В нашем примере slice имеет емкость 4, так как от array[1] до конца массива array имеется 4 элемента.

Как изменить длину и емкость слайса
Когда слайс заполняется и нужно добавить больше элементов, чем позволяет его текущая емкость,
Go автоматически создает новый, больший массив, копирует элементы старого массива в новый и обновляет указатель Data слайса на новый массив.*/
