package main

import (
	"fmt"
)

/*
Цикл for
Цикл for в Go имеет следующий синтаксис:

for initialization; condition; post {
// тело цикла
}
initialization - инициализация переменной (обычно счетчика цикла).
condition - условие, при котором цикл будет продолжаться.
post - действие, выполняемое после каждой итерации цикла.

Мы с вами рассмотрим 4 вида циклов:
Бесконечный цикл
Цикл с условием
Цикл с параметром
Цикл цикл с использованием range (slice, map, chan)

Бесконечный циклы:

	for {
		// бесконечное выполнение
	}

Цикл с условием:

	for a == 5 {
		// do something
	}

Цикл с параметром:

	for i := 0; i < 10; i++ {
	    // do something
	}
*/
func main() {
	//for {
	//	fmt.Println("Stop me please")
	//	time.Sleep(1 * time.Second)
	//}

	for i := 0; i < 10; i++ {
		if i == 9 {
			break // прерывание цикла при i == 9
		}
		if i%2 == 0 {
			continue // переход к следующей итерации при четном числе
		}
		fmt.Println(i)
	}
	/* Цикл цикл с использованием range
	В зависимости от того, как использован оператор "range", он может присваивать одну или две переменные итерации.

	Если оператор "range" используется с одной переменной, то эта переменная будет получать индекс элемента (или ключ, если применяется к map), а затем выполняется блок кода.

	Если оператор "range" используется с двумя переменными, то первая переменная будет получать индекс (или ключ), а вторая - значение элемента (или значение из канала).
	После этого выполняется блок кода.

	*/

	slice := []int{1, 2, 3, 4, 5}
	for index, value := range slice {
		fmt.Printf("Индекс: %d, Значение: %d\n", index, value)
	}

	//Индекс: 0, Значение: 1
	//Индекс: 1, Значение: 2
	//Индекс: 2, Значение: 3
	//Индекс: 3, Значение: 4
	//Индекс: 4, Значение: 5

	/*Мы можем игнорировать возвращаемые значения */

	for _, value := range slice {
		fmt.Println(value)
	}

	//1
	//2
	//3
	//4
	//5

	// Использование цикла для перебора ключей и значений map.
	fmt.Println("\nИспользование цикла для перебора ключей и значений map")
	dict := map[string]int{"a": 1, "b": 2, "c": 3, "d": 4}
	for key, value := range dict {
		fmt.Printf("Ключ: %s, Значение: %d\n", key, value)
	}

	//Ключ: a, Значение: 1
	//Ключ: b, Значение: 2
	//Ключ: c, Значение: 3

	// Цикл for для вывода букв строки.
	fmt.Println("\nЦикл for для вывода букв строки")
	str := "Hello"
	for _, char := range str {
		fmt.Println(string(char))
		fmt.Println(char)
		fmt.Printf("%T\n", char)
	}

	//H
	//72
	//e
	//101
	//l
	//108
	//l
	//108
	//o
	//111
	//
	//72 соответствует символу 'H' в кодировке Unicode.
	//101 соответствует символу 'e' в кодировке Unicode.
	//108 соответствует символу 'l' в кодировке Unicode.
	//111 соответствует символу 'o' в кодировке Unicode

}
