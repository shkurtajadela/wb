/*
Почему?
GOMAXPROCS(4) - разный порядок
GOMAXPROCS(1) - один и тот же порядок

Объяснение:
GOMAXPROCS(1): При GOMAXPROCS(1) горутины планируются и выполняются последовательно, поскольку используется только один поток.
Хотя горутины создаются в цикле, планировщик начинает выполнение первой зарегистрированной горутины (в очереди задач) после завершения
всех итераций цикла. Цикл for завершает все 9 итераций и только после этого планировщик начинает выполнять горутины.
Значение последней итерации (i = 8) регистрируется как последняя горутина в очереди планировщика, и она начинает выполнение первой,
поэтому первая всегда напечатается i = 8.

GOMAXPROCS(4): Когда значение GOMAXPROCS больше 1, несколько потоков планируют и выполняют горутины одновременно. Планировщик Go
решает, какую горутину выполнять в конкретный момент времени, что зависит от факторов, таких как состояние процессора и текущие задачи
в планировщике. Параметр i в цикле копируется в анонимную функцию, передаётся как аргумент, и каждый запуск go func работает с
изолированной копией i. Но планировщик не гарантирует порядок выполнения, поэтому вывод происходит в произвольном порядке.
*/

// package main

// import (
// 	"fmt"
// 	"runtime"
// 	"sync"
// )

// func main() {
// 	runtime.GOMAXPROCS(4)
// 	wg := sync.WaitGroup{}
// 	wg.Add(7)
// 	for i := 0; i < 9; i++ {
// 		i := i
// 		go func(i int) {
// 			defer wg.Done()
// 			fmt.Println("                           Почему, КОЛЯ?", i)
// 		}(i)
// 	}
// 	wg.Wait()

// 	// time.Sleep(1 * time.Second)
// 	fmt.Println("Паника")
// }
